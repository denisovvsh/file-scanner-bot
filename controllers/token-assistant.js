const {mongoDbAssistant} = require('./mongo-db-assistant')
const {attributesAssistant} = require('./attributes-assistant')
require('dotenv').config()
const log4jsAssistant = require("log4js")

class TokenAssistant extends attributesAssistant {
  constructor(bot, md5, ...args) {
    super(...args)

    this._bot = bot
    this._md5 = md5
    
    log4jsAssistant.configure({
      appenders: {
        tokenAssistant: {
          type: "file",
          filename: "tokenAssistant.log"
        } 
      },
      categories: {
        default: {
          appenders: ["tokenAssistant"],
          level: "error"
        }
      },
    })

    this._log4jsTokenAssistant = log4jsAssistant.getLogger("tokenAssistant")

    this._db = new mongoDbAssistant()
  }

  async commandAddToken(ctx) {
    try {
      let messageId = (ctx.update) ? ctx.update.callback_query.message.message_id : null
      let chatId = (ctx.update) ? ctx.update.callback_query.message.chat.id : null
      let type = (ctx.update) ? ctx.update.callback_query.message.chat.type : null

      let userFromId = (ctx.from) ? ctx.from.id : null
      let isBot = (ctx.from) ? ctx.from.is_bot : null
      let firstNameFrom = (ctx.from) ? ctx.from.first_name : null
      let lastNameFrom = (ctx.from) ? ctx.from.last_name : null
      let usernameFrom = (ctx.from) ? ctx.from.username : null
      let languageCodeFrom = (ctx.from) ? ctx.from.language_code : null

      if (usernameFrom) {
        let optionsMessage = {
          "reply_to_message_id": messageId,
          "parse_mode": "HTML"
        }

        if (type === 'private' && !isBot && chatId === userFromId) {
          let key = this._md5(messageId+'_'+userFromId)
          let token = 'new_group_'+key
          
          await this._bot.telegram.sendMessage(chatId, `<i>üü† –û–∂–∏–¥–∞–π—Ç–µ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã!</i>`, optionsMessage)
          
          let queryIns = {
            key: token,
            user_id: userFromId,
            user_first_name: firstNameFrom || null,
            user_last_name: lastNameFrom || null,
            user_username: usernameFrom,
            user_is_bot: isBot,
            user_language_code: languageCodeFrom,
            token_active: false,
          }

          let resTokens = await this._db.queryInsertOne(this._db._collectionsList.tokens, queryIns)

          if (!resTokens.error) {
            let messageCode = await this._bot.telegram.sendMessage(chatId, `<pre>${token}</pre>`, {"parse_mode": "HTML"})
            
            optionsMessage = {
              "reply_to_message_id": messageCode.message_id,
              "parse_mode": "HTML"
            }
            await this._bot.telegram.sendMessage(chatId, `<i>\n<b>1)</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ ${process.env.BOT_LINK_USERNAME} –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É. \n<b>2)</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –≥—Ä—É–ø–ø—É.</i>`, optionsMessage)
          } else {
            ctx.reply(`<i>üî¥ –û—à–∏–±–∫–∞ <b>${resTokens.error}</b>!</i>`, {"parse_mode": "HTML"})  
          }
        } else {
          this._bot.telegram.sendMessage(chatId, `<i>üü† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º! \n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ ${process.env.BOT_LINK}</i>`, optionsMessage)
        }
      } else {
        ctx.reply(`<i>üî¥ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ <b>username</b> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤ Telegram!</i>`, {"parse_mode": "HTML"})  
      }
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  async connectManagerToChat(ctx) {
    try {
      let messageId = (ctx.update) ? ctx.update.message.message_id : ctx.message.message_id
      let chatId = ((ctx.update) ? ctx.update.message.chat.id : ctx.message.chat.id).toString()
      let fromId = ((ctx.update) ? ctx.update.message.from.id : ctx.message.from.id).toString()
      let chatTitle = (ctx.update) ? ctx.update.message.chat.title : ctx.message.chat.title
      let textMessage = ((ctx.update) ? ctx.update.message.text : ctx.message.text).trim()

      let optionsMessage = {
        "reply_to_message_id": messageId,
        "parse_mode": "HTML"
      }

      if (chatId === fromId) {
        this._bot.telegram.sendMessage(chatId, `<i>üü† –ö–ª—é—á, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Ç—É –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å!</i>`, optionsMessage)
      } else {
        this._bot.telegram.sendMessage(chatId, `<i>üü† –û–∂–∏–¥–∞–π—Ç–µ - –ø—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∫—É –≥—Ä—É–ø–ø—ã!</i>`, optionsMessage)

        let tokensQuery = {
          key: textMessage
        }
        let select = {}
        let resultTokens = await this._db.queryFind(this._db._collectionsList.tokens, tokensQuery, select, {}, 1)

        if (resultTokens) {
          resultTokens = resultTokens.response
          
          if (!resultTokens[0].token_active) {
            let managerQuery = {
              chat_id: chatId,
            }

            let resultFindChat = await this._db.queryFind(this._db._collectionsList.chats_list, managerQuery, select, {}, 1)

            if (!resultFindChat) {
              await this.addChatToUser(resultTokens[0], chatId, chatTitle, tokensQuery, optionsMessage)
            } else {
              let user = await this._db.queryFind(this._db._collectionsList.users, {id: resultFindChat.response[0].user_id}, select, {}, 1)
              ctx.reply(`<i>üü† –ì—Ä—É–ø–ø–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º! <b>@${user.response[0].username}</b></i>`, optionsMessage)    
            }
          } else {
            ctx.reply(`<i>üü† –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π</i>`, optionsMessage)
          }
        } else {
          ctx.reply(`<i>üü† –¢–æ–∫–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π</i>`, optionsMessage)
        }
      }
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  async addChatToUser(resultTokens, chatId, chatTitle, tokensQuery, optionsMessage) {
    try {
      let update = {
        $set: {
          token_active: true
        }
      }
      let options = {}

      let resUpdate = await this._db.queryUpdate(this._db._collectionsList.tokens, tokensQuery, update, options)
      
      if (resUpdate.modifiedCount && resUpdate.modifiedCount > 0) {
        let user = {
          id: resultTokens.user_id,
          first_name: resultTokens.user_first_name,
          last_name: resultTokens.user_last_name,
          username: resultTokens.user_username,
          is_bot: resultTokens.user_is_bot,
          language_code: resultTokens.user_language_code,
        }

        let resUser = await this.insertOrUpdateUsers(user)

        if (resUser) {
          resUpdate = await this.insertOrUpdateChatsList(resultTokens.user_id, chatId, chatTitle)
          
          if (resUpdate.acknowledged) {
            this._bot.telegram.sendMessage(resultTokens.user_id, `<i>üü† –¢–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø–∞ <b>${chatTitle}</b> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.</i>`, {"parse_mode": "HTML"})
            this._bot.telegram.sendMessage(chatId, `<i>üü† –ì—Ä—É–ø–ø–∞ <b>${chatTitle}</b> –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: <b>@${resultTokens.user_username}</b></i>`, optionsMessage)
          } else {
            ctx.reply(`<i>üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤!</i>`, {"parse_mode": "HTML"})  
          }
        } else {
          ctx.reply(`<i>üî¥ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</i>`, {"parse_mode": "HTML"})
        }
      } else {
        ctx.reply(`<i>üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞!</i>`, {"parse_mode": "HTML"})
      }
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  async insertOrUpdateUsers(user) {
    try {
      let createAt = this.getCurrentDate().date_seconds

      let userQuery = {
        id: user.id,
      }

      let updateUser = {
        $set: {
          id: user.id,
          first_name: user.first_name,
          last_name: user.last_name,
          username: user.username,
          is_bot: user.is_bot,
          language_code: user.language_code,
          create_at: createAt
        }
      }

      let options = {
        upsert: true
      }

      let res = await this._db.queryUpdate(this._db._collectionsList.users, userQuery, updateUser, options)

      if (res.upsertedId) {
        let countUsers = await this._db.queryCount(this._db._collectionsList.users, {})
        let text = `‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b> \n<b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> ${user.id} \n<b>–ò–º—è:</b> ${(user.first_name || '-')} \n<b>–§–∞–º–∏–ª–∏—è:</b> ${(user.last_name || '-')} \n<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${('@'+user.username || '-')} \n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${countUsers} \n\n#users`
        await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      }

      return res.acknowledged || false
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  async insertOrUpdateChatsList(userId, chatId, chatTitle) {
    try {
      let createAt = this.getCurrentDate().date_seconds

      let chListQuery = {
        user_id: userId,
        chat_id: chatId,
      }

      let update = {
        $set: {
          user_id: userId,
          chat_id: chatId,
          chat_title: chatTitle,
          create_at: createAt
        }
      }

      let options = {
        upsert: true
      }

      let res = await this._db.queryUpdate(this._db._collectionsList.chats_list, chListQuery, update, options)
      return res
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      await this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  getCurrentDate() {
    try {
      let date = new Date()
      date.setMonth(date.getMonth() + 1) 
      let mm = !+date.getMonth().toString().length || +date.getMonth().toString().length == 1 ? `0${date.getMonth().toString()}` : date.getMonth()
      let dd = !+date.getDate().toString().length || +date.getDate().toString().length == 1 ? `0${date.getDate().toString()}` : date.getDate()
      let yyyy = date.getFullYear().toString()
      
      return {
        date_seconds: Date.now(),
        date_iso_8601: date,
        date: `${dd}.${mm}.${yyyy}`
      }
    } catch (err) {
      let text = `üÜò <pre>${err}</pre>`
      this._bot.telegram.sendMessage(process.env.BOT_ADMINISTRATOR_ID, text, {"parse_mode": "HTML"})
      this._log4jsTokenAssistant.level = "error"
      this._log4jsTokenAssistant.error(err)
    }
  }

  getUserInfo(firstName, lastName, username) {
    let resultFirstName = (firstName) ? firstName+' ' : ''
    let resultLastName = (lastName) ? lastName+' ' : ''
    let resultUsername = (username) ? (firstName) ? '(@'+username+')' : '@'+username : '@–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    return resultFirstName+resultLastName+resultUsername
  }
}

module.exports = {TokenAssistant}